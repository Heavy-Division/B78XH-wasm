TODO (GLOBAL SCOPE):
	- It is problematic to have classes with nanovg dependency as static library (eg: Controls) because of INVALID_LLVM -> Try the linking on clean WASM module
	- Controls are temporary inside B78XH project because of INVALID_LLVM -> Move the controls to separate project after figure the problem out

TODO (PFD/AUX PRE RELEASE):
	- MINIMA POSITION
	- MINIMA Updating
	- MINIMA Pointer ???
	- AClock reset logic




TODO:
	- Fragments of displays should not use windowWidth and windowHeight. The fragments should be standalone. Rendering should start at 0x0 pixel and position of the fragment should be controlled by main gauge/diplay
	  Example: AirspeedIndicator should not care about position on PFD screen. The indicator should be drawn as is and PFD display should translate the indicator to correct position on the display
	  Desc: This should allow transforming of the fragments to hi-res by nvgScale() without changing offsets and dimension of the fragment
	- make MCP DSEG Font

BUGs:
	Fix 0 character in FMCFont (0 character should be more rounded)

SCALABLE REFACTORING:
	- [DONE] Airspeed indicator
	- [DONE] Altitude indicator
	- [DONE] FMA
	- [DONE] Target Airspeed
	- [DONE] Target Altitude
	- [DONE] VerticalSpeed indicator

NOTES:
	- nvgResetTransform resets all transforms of current context. nvgSave/nvgRestore has to be called when you need to resetTransform inside another nvgTransform
	- Gauges hold fsContext and pointer to nvgContext then all gauge fragments holds only reference to nvgContext pointer (fsContext is unknown during gauge initialization -> nvgContext is nullptr
	but because RENDERER is initialized during gauge initialization then the RENDERER get nullptr as parameter of contructor) This problem can be fixed by explicit calling setContext(NVGContext)
	at all fragments when the context is known or passing only reference to pointer. By passing reference to pointer in constructor of fragments the fragment starts render automatically
	when nvgContext of gauge is known / set.

IDEAS:
	use TOOLSimConnectHanglingGaugeCallback for connecting and disconecting global SimConnect instead of module_init / module_deinit
	[CDU Renderer] Move definitions of LSKs and RSKs to page renderer
		PROPS: 
			- EVENT can be set during page rendering;
		CONS: 
			- SK buttons are not part of page
			- page should care only about rendering data and should not care about events binding
		IDEAS:
			- page should not care about events binding and getting data because page should be only static thing but the page cares about this. Page need to know the data
			  because of rendering templates (settable data)
			- to fix the problem above... PageDataResolver could be made.... Resolver would get data for page and prepare lines for rendering then the PageRenderer could be only static Renderer
			  because resolver would get data, prepare events
			- SKs and MKs coulbe moved to own Buttons renderer


FIXED BUGs:
	[FIXED] TCPs invalidate flag has to be set to true when VHF frequencies are recieved
	[FIXED] IDs for CONTROL LVARs have to be 1,2,3 because of locked XML files

DOCUMENTATION:
	CDU:
		RENDERERs:
			- CDULineRenderer
				1) Should have less performance impact
				2) CDUPage only prepares lines
				3) CDUPageRender pushes lines to CDULineRenderer
				4) Lines have to be cleared pre draw
				5) Lines container has to be cleared pre draw
				6) Uses more memory
				7) All lines are created during construction
			- CDU*Line classes
				1) Probably have bigger performance impact
				2) CDUPageRenderer calls draw method of CDU*Line classes (could be called inside CDUPage)
				3) CDU*Line classes are able to render self
				4) Should use less memory
				5) Lines container has to be cleared pre draw
				6) Lines are created every pre draw cycle
				7) Easier to use